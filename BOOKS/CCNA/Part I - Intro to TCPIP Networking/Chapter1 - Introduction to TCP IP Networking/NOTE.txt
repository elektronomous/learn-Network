Networks work correctly because the various devices and software follow the rules. Those
rules come in the form of standards and protocols, which are agreements of a particular (tertentu)
part of how a network should work.

Networking models define a structure and different categories (layers) of standards and protocols. 
As new standards and protocols emerge over time, networkers can think of those new details in the
context of a working model.

You can think of a networking model as you think of a set of architectural plans for building a house.
A lot of different people work on building your house, such as framers, electricians, bricklayers, 
painters, and so on. The blueprint helps ensure that all the different pieces of the house work together
as a whole. Similarly, the people who make networking products, and the people who use those products to
build their own computer networks, follow a particular networking model. That networking model defines
rules about how each part of the network should work, as well as how the parts should work together so
that the entire network functions correctly.

Today, TCP/IP rules as the most pervasive networking model in use. You can find support for TCP/IP on
practically every computer operating system (OS) in existence today, from mobile phones to mainframe 
computers. Every network built using Cisco products today supports TCP/IP. And not surprisingly, the CCNA
exam focuses heavily on TCP/IP. This chapter uses TCP/IP for one of its main purposes: to present various
concepts about networking using the context of the different roles and functions in the TCP/IP model.

A networking model, sometimes also called either a networking architecture or networking blueprint, refers
to a comprehensive set of documents. Individually, each document describes one small function required for
a network; collectively, these documents define everything that should happen for a computer network to work.
Some documents define a protocol, which is a set of logical rules that devices must follow to communicate. 
Other documents define some physical requirements for networking. For example, a document could define the 
voltage and current levels used on a particular cable when transmitting data.

You can think of a networking model as you think of an architectural blueprint for building a house. Sure, 
you can build a house without the blueprint. However, the blueprint can ensure that the house has the right
foundation and structure so that it will not fall down, and it has the correct hidden spaces to accommodate
the plumbing, electrical, gas, and so on. Also, the many different people that build the house using the
blueprint—such as framers, electricians, bricklayers, painters, and so on—know that if they follow the 
blueprint, their part of the work should not cause problems for the other workers. Similarly, you could build
your own network—write your own software, build your own networking cards, and so on—to create a network.
However, it is much easier to simply buy and use products that already conform to some well-known networking
model or blueprint. Because the networking product vendors build their products with some networking model
in mind, their products should work well together.

Go to the History folder to comprehensive this networking model 

To define a protocol, TCP/IP uses documents called Requests For Comments (RFC). The TCP/IP model also avoids
repeating work already done by some other standards body or vendor consortium (perkumpulan) by simply referring
to standards or protocols created by those groups. For example, the Institute of Electrical and Electronic 
Engineers (IEEE) defines Ethernet LANs; the TCP/IP model does not define Ethernet in RFCs, but refers to IEEE
Ethernet as an option

You can use a web browser to connect to your favorite website, use most any app, and it all works. How? Well,
the OS on the computer implements parts of the TCP/IP model. The Ethernet card, or wireless LAN card, built in
to the computer implements some LAN standards referenced by the TCP/IP model. In short, the vendors that created
the hardware and software implemented TCP/IP.

To help people understand a networking model, each model breaks the functions into a small number of categories
called layers. Each layer includes protocols and standards that relate to that category of functions, as shown
in Image1.PNG.

The bottom layer (Physical) focuses on how to transmit bits over each individual link.

The data-link layer focuses on sending data over one type of physical link: for instance, networks use different 
data-link protocols for Ethernet LANs versus wireless LANs. 

The network layer focuses on delivering data over the entire path from the original sending computer to the final
destination computer. And 

the top two layers focus more on the applications that need to send and receive data.

Many of you will have already heard of several TCP/IP protocols, like the examples listed in Image2.PNG. 

TCP APPLICATION LAYER

TCP/IP application layer protocols provide services to the application software running on a computer. The 
application layer does not define the application itself, but it defines services that applications need. For
example, application protocol HTTP defines how web browsers can pull the contents of a web page from a web server.
In short, the application layer provides an interface between software running on a computer and the network itself.
Arguably, the most popular TCP/IP application today is the web browser.


HTTP OVERVIEW

What really happens to allow that web page to appear on your web browser? Imagine that Bob opens his browser. His
browser has been configured to automatically ask for web server Larry’s default web page, or home page. The general
logic looks like Image3.PNG.
So, what really happened? Bob’s initial request actually asks Larry to send his home page back to Bob. Larry’s web
server software has been configured to know that the default web page is contained in a file called home.htm. Bob
receives the file from Larry and displays the contents of the file in Bob’s web browser window.

HTTP PROTOCOL MECHANISMS
Taking a closer look, this example shows how applications on each endpoint computer—specifically, the web browser 
application and web server application—use a TCP/IP application layer protocol. To make the request for a web page and
return the contents of the web page, the applications use the Hypertext Transfer Protocol (HTTP).

HTTP did not exist until Tim Berners-Lee created the first web browser and web server in the early 1990s. Berners-Lee
gave HTTP functionality to ask for the contents of web pages, specifically by giving the web browser the ability to
request files from the server and giving the server a way to return the content of those files.

(Image4.PNG):
To get the web page from Larry, at Step 1, Bob sends a message with an HTTP header. Generally, protocols use headers as
a place to put information used by that protocol. This HTTP header includes the request to “get” a file. The request 
typically contains the name of the file (home.htm, in this case), or if no filename is mentioned, the web server assumes
that Bob wants the default web page.

Step 2 in Image4.PNG shows the response from web server Larry. The message begins with an HTTP header, with a return code
(200), which means something as simple as “OK” returned in the header. HTTP also defines other return codes so that the
server can tell the browser whether the request worked. (Here is another example: If you ever looked for a web page that
was not found, and then received an HTTP 404 “not found” error, you received an HTTP return code of 404.) The second 
message also includes the first part of the requested file(home.htm).

Step 3 in Image4.PNG shows another message from web server Larry to web browser Bob, but this time without an HTTP header.
HTTP transfers the data by sending multiple messages, each with a part of the file. Rather than wasting space by sending
repeated HTTP headers that list the same information, these additional messages simply omit the header.